name: Release
on:
  release:
    types: [published]
jobs:
  # linux x86_64 cpu/tpu
  linux:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        xla_target: [cpu, tpu]
    env:
      MIX_ENV: prod
      XLA_BUILD: true
      XLA_TARGET: ${{ matrix.xla_target }}
      CC: gcc-9
    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "24"
          elixir-version: "1.12.3"
      # Setup the compilation environment
      - uses: abhinavsingh/setup-bazel@v3
        with:
          version: "3.7.2"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the binary
      - run: mix deps.get
      - run: .github/scripts/check_release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: check_release
      - if: ${{ steps.check_release.outputs.continue == 'true' }}
        run: mix compile
      - if: ${{ steps.check_release.outputs.continue == 'true' }}
        run: .github/scripts/upload_binary.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # darwin x86_64 cpu
  macos_cpu:
    runs-on: macos-10.15
    env:
      MIX_ENV: prod
      XLA_BUILD: true
      XLA_TARGET: cpu
      CC: gcc-9
    steps:
      - uses: actions/checkout@v2
      - run: brew install elixir
      - run: mix local.hex --force
      # Setup the compilation environment
      - uses: abhinavsingh/setup-bazel@v3
        with:
          version: "3.7.2"
      - uses: actions/setup-python@v2
        with:
          python-version: "3.9"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the binary
      - run: mix deps.get
      - run: .github/scripts/check_release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: check_release
      - if: ${{ steps.check_release.outputs.continue == 'true' }}
        run: mix compile
      - if: ${{ steps.check_release.outputs.continue == 'true' }}
        run: .github/scripts/upload_binary.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # linux x86_64 cuda
  linux_cuda:
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - container: nvidia/cuda:11.1.1-cudnn8-devel-ubuntu20.04
            xla_target: cuda111
            python: "3.9"
            image_os: ubuntu20
          - container: nvidia/cuda:11.0.3-cudnn8-devel-ubuntu20.04
            xla_target: cuda110
            python: "3.9"
            image_os: ubuntu20
          - container: nvidia/cuda:10.2-cudnn7-devel-ubuntu18.04
            xla_target: cuda102
            python: "3.6.9"
            image_os: ubuntu18
    container: ${{ matrix.container }}
    env:
      MIX_ENV: prod
      XLA_BUILD: true
      XLA_TARGET: ${{ matrix.xla_target }}
      # This env is normally set by default, but we need to mirror it into the container
      # ourselves (used by the actions/setup-beam).
      ImageOS: ${{ matrix.image_os }}
      # Set the missing utf-8 locales, otherwise Elixir warns
      LANG: en_US.UTF-8
      LANGUAGE: en_US:en
      LC_ALL: en_US.UTF-8
      # Make sure installing packages (like tzdata) doesn't prompt for configuration
      DEBIAN_FRONTEND: noninteractive
    steps:
      # The base images are minimalistic, so we bring a few necessary system packages
      - name: Install system packages
        run: |
          # We need to install "add-apt-repository" first
          apt-get update && apt-get install -y software-properties-common
          # Add repository with the latest git version for action/checkout to properly clone the repo
          add-apt-repository ppa:git-core/ppa
          # We run as root, so sudo is not necessary per se, but some actions (like setup-bazel) make use of it
          apt-get update && apt-get install -y locales ca-certificates curl git sudo unzip wget
          # Install GitHub CLI used by our scripts
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg --dearmor -o /usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          apt-get update && apt-get install -y gh
          # Update locales
          echo "$LANG UTF-8" >> /etc/locale.gen
          locale-gen
          update-locale LANG=$LANG
      # Proceed with the regular steps
      - uses: actions/checkout@v2
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "24"
          elixir-version: "1.12.3"
      # Setup the compilation environment
      - uses: abhinavsingh/setup-bazel@v3
        with:
          version: "3.7.2"
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
        env:
          # Avoid permission errors for /github/home, in this case the directory
          # is used for pip cache and is not relevant either way
          HOME: /root
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the binary
      - run: mix deps.get
      - run: .github/scripts/check_release.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: check_release
      - if: ${{ steps.check_release.outputs.continue == 'true' }}
        run: mix compile
      - if: ${{ steps.check_release.outputs.continue == 'true' }}
        run: .github/scripts/upload_binary.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
