name: Release
on:
  push:
    tags:
      - "v*.*.*"

env:
  BAZELISK_VERSION: 1.26.0
  USE_BAZEL_VERSION: 7.4.1
  GH_VERSION: 2.74.2

jobs:
  create_draft_release:
    if: github.ref_type == 'tag'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Create draft release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if ! gh release list | grep -q ${{ github.ref_name }}; then
            gh release create --title ${{ github.ref_name }} --draft ${{ github.ref_name }}
          fi

  x86_64_linux:
    name: "x86_64-linux-gnu-{cpu,tpu}"
    needs: [create_draft_release]
    runs-on: ubuntu-latest
    # We intentionally build on ubuntu 20 to compile against
    # an older version of glibc
    container: ubuntu:20.04
    env:
      ImageOS: ubuntu20
      LANG: en_US.UTF-8
      LANGUAGE: en_US:en
      LC_ALL: en_US.UTF-8
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y \
            build-essential \
            cmake \
            curl \
            git \
            liblzma-dev \
            libncurses5-dev \
            libssl-dev \
            libtinfo-dev \
            python3 \
            python3-pip \
            python3-setuptools \
            python3-wheel \
            sudo \
            unzip \
            zlib1g-dev
          curl -fSL https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_linux_amd64.tar.gz -o gh.tar.gz
          tar -xzf gh.tar.gz --strip-components=1 -C /usr/local
      - uses: actions/checkout@v4
      - name: Configure git
        run: |
          # This is needed to avoid the "fatal: detected dubious ownership in repository at '/__w/xla/xla'" error
          git config --global --add safe.directory /__w/xla/xla
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "24"
          elixir-version: "1.15.8"
      # Setup the compilation environment
      - name: Install Bazel
        run: |
          sudo curl -fSL "https://github.com/bazelbuild/bazelisk/releases/download/v${BAZELISK_VERSION}/bazelisk-linux-amd64" -o /usr/local/bin/bazel
          sudo chmod +x /usr/local/bin/bazel
      - run: python3 -m pip install --upgrade pip numpy
      - run: |
          clang_version="18"
          sudo apt-get update
          sudo apt-get install -y wget gnupg software-properties-common lsb-release
          wget -qO- https://apt.llvm.org/llvm.sh | sudo bash -s -- $clang_version
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-$clang_version 200
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-$clang_version 200
      # Build and upload the archives
      - run: mix deps.get
      - run: .github/scripts/compile_and_upload.sh ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: cpu
      - run: .github/scripts/compile_and_upload.sh ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: tpu

  aarch64_linux:
    name: "aarch64-linux-gnu-cpu"
    needs: [create_draft_release]
    runs-on: ubuntu-24.04-arm
    # We intentionally build on ubuntu 20 to compile against
    # an older version of glibc
    container: ubuntu:20.04
    env:
      ImageOS: ubuntu20
      LANG: en_US.UTF-8
      LANGUAGE: en_US:en
      LC_ALL: en_US.UTF-8
      DEBIAN_FRONTEND: noninteractive
    steps:
      - name: Install dependencies
        run: |
          apt-get update
          apt-get install -y \
            build-essential \
            cmake \
            curl \
            git \
            liblzma-dev \
            libncurses5-dev \
            libssl-dev \
            libtinfo-dev \
            python3 \
            python3-pip \
            python3-setuptools \
            python3-wheel \
            sudo \
            unzip \
            zlib1g-dev
          curl -fSL https://github.com/cli/cli/releases/download/v${GH_VERSION}/gh_${GH_VERSION}_linux_arm64.tar.gz -o gh.tar.gz
          tar -xzf gh.tar.gz --strip-components=1 -C /usr/local
      - uses: actions/checkout@v4
      - name: Configure git
        run: |
          # This is needed to avoid the "fatal: detected dubious ownership in repository at '/__w/xla/xla'" error
          git config --global --add safe.directory /__w/xla/xla
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "24"
          elixir-version: "1.15.8"
      # Setup the compilation environment
      - name: Install Bazel
        run: |
          sudo curl -fSL "https://github.com/bazelbuild/bazelisk/releases/download/v${BAZELISK_VERSION}/bazelisk-linux-arm64" -o /usr/local/bin/bazel
          sudo chmod +x /usr/local/bin/bazel
      - run: python3 -m pip install --upgrade pip numpy
      - run: |
          clang_version="18"
          sudo apt-get update
          sudo apt-get install -y wget gnupg software-properties-common lsb-release
          wget -qO- https://apt.llvm.org/llvm.sh | sudo bash -s -- $clang_version
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-$clang_version 200
          sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-$clang_version 200
      # Build and upload the archives
      - run: mix deps.get
      - run: .github/scripts/compile_and_upload.sh ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: cpu

  macos:
    name: "x86_64-darwin-cpu"
    needs: [create_draft_release]
    runs-on: macos-13
    steps:
      - uses: actions/checkout@v4
      - run: brew install elixir
      - run: mix local.hex --force
      # Setup the compilation environment
      - uses: bazel-contrib/setup-bazel@0.14.0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archive
      - run: mix deps.get
      - run: .github/scripts/compile_and_upload.sh ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: cpu
          # This runner comes with Clang 14, which does not support the -mavxvnniint8
          # CLI flag. We can install newer Clang, however at some point Bazel toolchains
          # invoke xcrun clang, which always uses the system version from Xcode, ignoring
          # whichever version we installed ourselves. With the flag below, we make sure
          # this flag is not passed in the first place.
          # See https://github.com/tensorflow/tensorflow/pull/87514
          BUILD_FLAGS: "--define=xnn_enable_avxvnniint8=false"

  macos_arm:
    name: "aarch64-darwin-cpu"
    needs: [create_draft_release]
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4
      - run: brew install elixir
      - run: mix local.hex --force
      # Setup the compilation environment
      - uses: bazel-contrib/setup-bazel@0.14.0
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - run: python -m pip install --upgrade pip numpy
      # Build and upload the archive
      - run: mix deps.get
      - run: .github/scripts/compile_and_upload.sh ${{ github.ref_name }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          XLA_TARGET: cpu
